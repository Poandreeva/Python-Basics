# 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
#  который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
# 31    32         3    5    32        3    5    8    3
# 37    43         2    4    6         8    3    7    1
# 51    86        -1   64   -8
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
# (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
# с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, list):
        self.list = list

    # 1 вариант
    def __add__(self, other):
        l = []
        li = []
        for i in range(len(self.list)):
            for j in range(len(self.list[i])):
                l.append(self.list[i][j] + other.list[i][j])
            li.append(l)
            l = []
        return Matrix(li)

    # 2 вариант
    #    def __add__(self, other):
    #        for i in range(len(self.list)):
    #            for j in range(len(self.list[i])):
    #                self.list[i][j] = self.list[i][j] + other.list[i][j]
    #        return Matrix(self.list)

    def __str__(self):
        return str('\n'.join(['\t'.join([str(el) for el in i]) for i in self.list]))


m1 = Matrix([[1, 2], [3, 4], [5, 6]])
print(f'вывод матрицы:\n{m1}')
m2 = Matrix([[1, 2], [3, 4], [5, 6]])
print(f'сумма матриц:\n{m1 + m2}')


# 2. Реализовать проект расчёта суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определённое название.
# К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры:
# размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5),
# для костюма (2*H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.
from abc import ABC, abstractmethod


class Clothes(ABC):
    def __init__(self, param):
        self.param = float(param)

    @property  # создаем декоратор property для геттера
    def fabric(self):
        return self.param

    @fabric.setter  # создаем сеттер, чтобы правильно менять значение
    def fabric(self, param):
        self.param = float(param)

    @abstractmethod  # абстрактный метод, чтобы не забыть его в дочернем классе
    def coat(self):
        pass

    @abstractmethod
    def suit(self):
        pass


class Coat(Clothes):

    def coat(self):
        return self.param / 6.5 + 0.5

    def suit(self):
        pass


class Suit(Clothes):

    def suit(self):
        return 2 * self.param + 0.3

    def coat(self):
        pass


c = Coat(input('введите мерки пальто: '))
print(c.__dict__)
s = Suit(input('введите мерки костюма: '))
print(s.__dict__)
print('общая площадь ткани: ', c.coat() + s.suit())
c.fabric = input('введите новый параметр для пальто: ')
print(c.__dict__)
s.fabric = input('введите новый параметр для костюма: ')
print(s.__dict__)
print('новая общая площадь ткани: ', c.coat() + s.suit())


# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание
# (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и
# выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт
# строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку:
# *****\n*****\n*****."""

class Cell:
    def __init__(self, number):
        self.number = number

    @classmethod
    def verify_number(cls, number):
        if


